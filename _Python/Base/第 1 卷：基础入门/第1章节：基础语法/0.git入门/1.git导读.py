# VCS  version control system
"""
# 版本控制  （——难题）
        # 不同版本之间如何进行统一等问题
        # 程序之间如何交互
        # 记录变化、回溯版本等
        # 需要版本控制系统实现
    三种模式：
        本地版本控制
        集中版本控制 SVN
        分布式版本控制 Git  ___Linus

Git:
    Git Bash:推荐使用，类似与 linus方式
    Git CMD:Windows命令行风格
    Git GUI:不推荐，图形界面
"""
# 基本概念
"""
* Git是什么?
    Git是目前世界上最先进的分布式版本控制系统。
    Git 是一个常用的去中心化源代码仓库。它由 Linux 之父 Linus Torvalds 创建，用于管理 Linux 内核源代码。
    
* Git 与 svn 的区别
    Git是分布式版本控制系统,没有中央服务器的,每个人的电脑就是一个完整的版本库,这样工作就不需要联网,
因为版本是在自己的电脑上面.既然每个人都有一个完整的版本库,多人协作只需把各自的修改推送给对方，就可以
互相看到对方的修改了.
    svn是集中式版本控制系统,版本库是集中放在中央服务器的,而干活的时候,用的都是自己的电脑,所以首先要
从中央服务器得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。
    集中式版本控制系统是必须联网才能工作(局域网下还ok)。
"""
# ----------------------------------------------------------------------------------
# 导读
"""
前言:
    Git 是一个快速、可扩展的 分布式版本控制系统，它具有极为丰富的命令集，对内部系统提供了高级操作和
完全访问.Git与你熟悉的大部分版本控制系统的差别是很大的。也许你熟悉Subversion、 CVS 、Perforce、
Mercurial 等等，使用“增量文件系统” （Delta Storage systems）, 就是说它们存储每次提交(commit)之
间的差异. Git 正好与之相反，它会把你的每次提交的文件的全部内容（snapshot）都会记录下来 。
    理论上，Git 可以保存任何文档，但是最善于保存文本文档，因为它本来就是为解决软件源代码（也是一种文
本文档）版本管理问题而开发的，提供了许多有助于文本分析的工具。对于非文本文档，Git 只是简单地为其进行
备份并实施版本管理。

Git 配置( git config)
*    使用Git的第一件事就是设置你的名字和email,这些就是你在提交commit时的签名。
        $ git config --global user.name "Robin Hu"
        $ git config --global user.email "hudashi@gmail.com"

*    执行上述命令后,会在主目录(home directory)建立一个叫~/.gitconfig 的文件. 
内容一般如下:
        [user]
        name = Robin Hu
        email = hudashi@gmail.com
    注:  这样的设置是全局设置,会影响此用户建立的每个项目.
"""
# ----------------------------------------------------------------------------------
# 如果你想使项目里的某个值与前面的全局设置有区别(例如把私人邮箱地址改为工作邮箱);
# 你可以在项目中使用 git config 命令不带 --global 选项来设置.
# 这会在你项目目录下的 .git/config 文件增加一节[user]内容(如上所示).

# ----------------------------------------------------------------------------------
# git 默认的编辑器是 GNU nano 这样的编辑器，可以通过如下的命令把它设置为 vim 编辑器
# git config --global core.editor vim

# ----------------------------------------------------------------------------------
# 初始化
"""
* 初始化一个新的项目仓库（git init）
    假设有一个叫”project.tar.gz”的压缩文件里包含了你的一些文件，你可以用下面的命令让它置于Git的版本
控制管理之下.
$ tar xzf project.tar.gz
$ cd project
$ git init

Git会输出:
    Initialized empty Git repository in .git/
    这意味着一个仓库被初始化了。
结果: 
    在 project 目录下创建了一个 .git  隐藏目录，它就是所谓的 Git 仓库，不过现在它还是空的。
    另外 project 目录也不再是普通的文档目录了，今后我们将其称为 工作树。 
    每个 工作树 又包含着一个 Git仓库 。只要我们拥有 git仓库 ，那么就可以很容易地生成 工作树 。
"""
# ----------------------------------------------------------------------------------
# 存储
"""
    将把工作树中的一些文档存储至 Git 仓库中。由于Git 在向仓库中添加文档时并非是简单地文档复制过去，
势必要将所添加文档进行一番处理，生成Git 仓库所能接受的数据格式，Git 称这个过程为"take a snapshot"（生成快照）。
"""

# 若将工作树下所有文档（包含子目录）生成快照，可采用以下命令：
# $  git add  .    （ . 表示当前目录）

# -----------------------------------------------------
# 版本更新（提交 commit）
"""
  *  git add 命令所生成的快照被存放到一个临时的 存储区域 ，Git 称该区域为 索引。使用 git commit 命令可将索引提交至仓库中，
这个过程称为提交，每一次提交都意味着版本在进行一次更新.
"""
# 用法如下：
# $  git commit

# -----------------------------------------------------
# 版本更新说明
"""
  *  执行上述git-commit 命令时，Git 会自动调用系统默认的文本编辑器，要求你输入版本更新说明并保存。
    请记住，输入简约的版本更新说明是非常有必要的，它就像剧本一样，可以帮助你快速回忆起对项目的重大改动。
对于简短的版本更新信息，可以使用git commit 的“-m”选项，如下：
"""
# $  git commit -m " 你的版本更新信息 "

# ----------------------------------------------------------------------------------
# 文档忽略机制（避免为之生成快照）

# 比如：（譬如程序编译时生成的中间文件）
#   对于 project目录下的 out目录，可以采用如下操作可将其排除到 git管理之外.
# $ cd project
# $ echo "out" >  .gitignore

# ----------------------------------------------------------------------------------
# 克隆一个项目仓库（clone）

"""
* 为了得一个项目的拷贝(copy),我们需要知道这个项目仓库的地址(Git URL).
    Git能在许多协议下使用，所以 Git URL 可能以ssh://, http(s)://, git://,或是只是以一个用户名
（git 会认为这是一个ssh 地址）为前辍. 

* git://协议较为快速和有效,但是有时必须使用http协议. 
比如:
    你公司的防火墙阻止了你的非 http访问请求.如果你执行了上面两行命令中的任意一个,你会看到一个新目录: 
        'git',它包含有所的Git源代码和历史记录.

在默认情况下，
    Git会把"Git URL"里最后一级目录名的'.git'的后辍去掉,做为新克隆(clone)项目的目录名: 
        例如.
        git clone https://git.kernel.org/linux/kernel/git/torvalds/linux-2.6.git 
            会建立一个目录叫 'linux-2.6' 
"""
# 有些仓库可以通过不只一种协议来访问
# -----------------------------------------------------
# 例如，Git 本身的源代码你既可以用  git://  协议来访问：
#   git clone git://git.kernel.org/pub/scm/git/git.git

# -----------------------------------------------------
# 也可以通过 http 协议来访问:
#   git clone http://www.kernel.org/pub/scm/git/git.git

# -----------------------------------------------------
# 若是访问一个 Git URL需要用户名和密码：
#   git  clone  Hua.YinG @ http://www.kernel.org/pub/scm/git/git.git
# Git URL前加上 用户名 ，并在它们之间加上 @ 符合以表示分割，然后执行 git clone命令，git会提示你输入密码。

# 指定要克隆的分支名  { -b <name> }
# $ git clone  -b   master   ../server  .

# ----------------------------------------------------------------------------------
# 简单操作

# 简单初始化：  git init
# 指定目录初始化： git init [name]
# 克隆远程仓库 {GitHub\Gitee}  git clone [address]
# 观察当前状态  git status
# 添加特定文件  git add [filename]
# 添加目录 git add.
# 提交：添加文件到库  git -commit -m"说明信息"
# 远程：push命令_____ git push
# git命令学习——url: https://oschina.gitee.io/learn-git-branching/
