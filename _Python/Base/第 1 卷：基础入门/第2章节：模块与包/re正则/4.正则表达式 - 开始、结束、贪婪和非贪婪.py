import re

# ---------------------------------------------------------------------------------------
# ^：以...开头, 匹配输入字符串的开始位置。
#   当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。
#   要匹配 ^ 字符本身，请使用 \^。
text_one = "hello world"
# result_one = re.match("^hello", text_one) # match 含有部分 ^ 功能
result_one = re.search("world", text_one)  # match 改为 search
print(result_one.group())

# ---------------------------------------------------------------------------------------
# $：以...结尾
# text_two = "hello world"
# result_two = re.search("hello$", text_two)
# print(result_two.group())
text_two = ""
result_two = re.search("^$", text_two)  # ^$ 以空的字符串开始,以空的字符串结束
print(result_two.group())

# ---------------------------------------------------------------------------------------
# |：匹配多个字符串或者表达式('或运算')

# ---------------------------------------------------------------------------------------
# 贪婪和非贪婪
'''
    贪婪与非贪婪模式影响的是被量词修饰的子表达式的匹配行为，贪婪模式在整个表达式匹配成功的前提下，
尽可能多的匹配，而非贪婪模式在整个表达式匹配成功的前提下，尽可能少的匹配。
    非贪婪模式只被部分NFA引擎所支持。
     
* 属于贪婪模式的量词，也叫做匹配优先量词，包括： 
    “{m,n}” 、 “{m,}” 、 “?” 、 “*” 和 “+”。 

* 在一些使用NFA引擎的语言中，在匹配优先量词后加上“?”，即变成属于非贪婪模式的量词，
也叫做忽略优先量词，包括： 
    “{m,n}?” 、 “{m,}?” 、 “??” 、 “*?” 和 “+?”。 
'''
text_three = "12345"
result_three = re.search("\d+?", text_three)  # 非贪婪,等于"\d{1}"
print(result_three.group())

# ---------------------------------------------------------------------------------------
# 案例 1：提取html标签名称
text_html = "<h1>这是标题</h1>"
result_html = re.search("<.+?>", text_html)
print(result_html.group())

# ---------------------------------------------------------------------------------------
# 案例 2：验证一个字符是不是 0-100 之间的数字
# 0,1,99,100,01
text_number = "91"
result_number = re.match("0$|[1-9]\d?$|100$", text_number)
print(result_number.group())
